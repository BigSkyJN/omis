<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.caseload.domain">
	<class entity-name="omis.caseload.domain.OffenderCaseAssignment"
		proxy="omis.caseload.domain.OffenderCaseAssignment"
		name="omis.caseload.domain.impl.OffenderCaseAssignmentImpl"
		table="`OFFENDER_CASE_ASSIGNMENT`">
		<id name="id" column="`ID`" type="java.lang.Long">
			<generator class="sequence">
				<param name="sequence">`OFFENDER_CASE_ASSIGNMENT_SEQ`</param>
			</generator>
		</id>
		<many-to-one name="caseload" column="`CASELOAD_ID`"  not-null="true" entity-name="omis.caseload.domain.Caseload"/>
		<many-to-one name="offender" column="`OFFENDER_ID`"  not-null="true" entity-name="omis.offender.domain.Offender"/>
		<component name="dateRange">
				<property name="startDate" column="`START_DATE`" not-null="false" type="java.util.Date"/>
				<property name="endDate" column="`END_DATE`" not-null="false" type="java.util.Date"/>
		</component>	
		<component name="creationSignature">
			<many-to-one name="userAccount" column="`CREATE_ACCOUNT_ID`" not-null="true"/>
			<property name="date" column="`CREATE_DATE`" not-null="true"/>
		</component>
		<component name="updateSignature">
			<many-to-one name="userAccount" column="`UPDATE_ACCOUNT_ID`" not-null="true"/>
			<property name="date" column="`UPDATE_DATE`" not-null="true"/>
		</component>	
	</class>
	
	<query name="findOffenderCaseAssignment"><![CDATA[
		select oca
		from
			omis.caseload.domain.OffenderCaseAssignment oca
		where
			oca.offender = :offender
			and 
			oca.caseload = :caseload
	]]></query>
	<query name="findOffenderCaseAssignmentExcluding"><![CDATA[
		select oca
		from
			omis.caseload.domain.OffenderCaseAssignment oca
		where
			oca.offender = :offender
			and 
			oca != :offenderCaseAssignment
	]]></query>
	<query name="findOffenderCaseAssignmentWithinDateRange"><![CDATA[
		select oca
		from
			omis.caseload.domain.OffenderCaseAssignment oca
		where
			oca.offender = :offender
			and 
			oca.caseload = :caseload
			and 
			((oca.dateRange.startDate >= :startDate
			and
				(oca.dateRange.startDate <= :endDate
				or 
				:endDate is null))
			or
			((oca.dateRange.startDate <= :startDate)
			and
				(:startDate <= oca.dateRange.endDate
				or
				oca.dateRange.endDate is null)))	
	]]></query>
	<query name="findOffenderCaseAssignmentWithinDateRangeExcluding"><![CDATA[
		select oca
		from
			omis.caseload.domain.OffenderCaseAssignment oca
		where
			oca.offender = :offender
			and 
			oca.caseload = :caseload
			and 
			((oca.dateRange.startDate >= :startDate
			and
				(oca.dateRange.startDate <= :endDate
				or 
				:endDate is null))
			or
			((oca.dateRange.startDate <= :startDate)
			and
				(:startDate <= oca.dateRange.endDate
				or
				oca.dateRange.endDate is null)))
			and oca != :assignment	
	]]></query>
	<query name="findAllOffenderCaseAssignments"><![CDATA[
		from omis.caseload.domain.OffenderCaseAssignment oca
		where
			oca.caseload = :caseload
			and 
			((oca.dateRange.startDate <= :effectiveDate
		       or oca.dateRange.startDate is null)
		   and (oca.dateRange.endDate > :effectiveDate
		       or oca.dateRange.endDate is null))
	]]></query>
	<query name="findAllOffenderCaseAssignmentsByCaseloadAndDateRange"><![CDATA[
		select 
			offenderAssignment
		from 
			omis.caseload.domain.OffenderCaseAssignment offenderAssignment
		where
			offenderAssignment.caseload = :caseload
			and 			
				((offenderAssignment.dateRange.startDate >= :startDate and offenderAssignment.dateRange.startDate < :endDate or (:endDate is null
			
			 or offenderAssignment.dateRange.endDate is null)))
			
		order by offenderAssignment.dateRange.startDate desc
	]]></query>
</hibernate-mapping>