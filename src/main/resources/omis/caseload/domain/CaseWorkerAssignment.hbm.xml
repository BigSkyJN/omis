<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.caseload.domain">
	<class entity-name="omis.caseload.domain.CaseWorkerAssignment"
		proxy="omis.caseload.domain.CaseWorkerAssignment" name="omis.caseload.domain.impl.CaseWorkerAssignmentImpl"
		table="`CASE_WORKER_ASSIGNMENT`">
		<id name="id" column="`ID`" type="java.lang.Long">
			<generator class="sequence">
				<param name="sequence">`CASE_WORKER_ASSIGNMENT_SEQ`</param>
			</generator>
		</id>
		<many-to-one name="worker" column="`PERSON_ID`" not-null="true" entity-name="omis.person.domain.Person" unique="false"/>
		<component name="dateRange">
				<property name="startDate" column="`START_DATE`" not-null="false" type="java.util.Date"/>
				<property name="endDate" column="`END_DATE`" not-null="false" type="java.util.Date"/>
		</component>
		<many-to-one name="caseload" column="`CASELOAD_ID`"  not-null="true" entity-name="omis.caseload.domain.Caseload"/>
		<component name="creationSignature">
			<many-to-one name="userAccount" column="`CREATE_ACCOUNT_ID`"
				not-null="true" />
			<property name="date" column="`CREATE_DATE`" not-null="true" />
		</component>
		<component name="updateSignature">
			<many-to-one name="userAccount" column="`UPDATE_ACCOUNT_ID`"
				not-null="true" />
			<property name="date" column="`UPDATE_DATE`" not-null="true" />
		</component>
	</class>
	<query name="findCaseWorkerAssignment"><![CDATA[
		select cwa
		  from omis.caseload.domain.CaseWorkerAssignment cwa
		 where cwa.worker = :worker		
		   and cwa.caseload = :caseload
		   and (cwa.dateRange.startDate = :startDate)
		   and (cwa.dateRange.endDate = :endDate
			or (cwa.dateRange.endDate is null and :endDate is null))
	]]></query>
	<query name="findCaseWorkerAssignmentExcluding"><![CDATA[
		select cwa
		  from omis.caseload.domain.CaseWorkerAssignment cwa
		 where cwa.worker = :worker	
		   and cwa.caseload = :caseload
		   and (cwa.dateRange.startDate = :startDate)
		   and (cwa.dateRange.endDate = :endDate
			or (cwa.dateRange.endDate is null and :endDate is null))
		   and cwa != :caseWorkerAssignment
	]]></query>
	<query name="findCaseAssignmentsByCaseloadCategoryWithinDates"><![CDATA[
		select cwa
		  from omis.caseload.domain.CaseWorkerAssignment cwa
		 where cwa.worker = :worker	
		   and cwa.caseload.category = :category
		   and ((cwa.dateRange.startDate >= :startDate
		   and (cwa.dateRange.startDate <= :endDate
			or :endDate is null))
			or ((cwa.dateRange.startDate <= :startDate)
		   and (:startDate <= cwa.dateRange.endDate
			or cwa.dateRange.endDate is null)))				
	]]></query>
		<query name="findCaseAssignmentByCaseloadCategoryWithinDatesExcld"><![CDATA[
		select cwa
		  from omis.caseload.domain.CaseWorkerAssignment cwa
		 where cwa.worker = :worker	
		   and cwa.caseload.category = :category
		   and ((cwa.dateRange.startDate >= :startDate
		   and (cwa.dateRange.startDate <= :endDate
			or :endDate is null))
			or ((cwa.dateRange.startDate <= :startDate)
		   and (:startDate <= cwa.dateRange.endDate
			or cwa.dateRange.endDate is null)))
		   and cwa != :caseWorkerAssignment	
	]]></query>
	<query name="findAllCaseWorkerAssignments"><![CDATA[
		from omis.caseload.domain.CaseWorkerAssignment cwa
		where
			cwa.caseload = :caseload
			and 
			((cwa.dateRange.startDate <= :effectiveDate
		       or cwa.dateRange.startDate is null)
		   and (cwa.dateRange.endDate > :effectiveDate
		       or cwa.dateRange.endDate is null))
	]]></query>
	<query name="findCaseAssignmentByCaseWorkerCategoryAndDate"><![CDATA[
		select cwa
		  from omis.caseload.domain.CaseWorkerAssignment cwa
    inner join cwa.worker worker
    inner join cwa.caseload caseload
		 where worker = :worker
		   and caseload.category = :category
		   and ((cwa.dateRange.startDate <= :effectiveDate
		    or cwa.dateRange.startDate is null)
		   and (cwa.dateRange.endDate > :effectiveDate
		    or cwa.dateRange.endDate is null))
	]]></query>
	
</hibernate-mapping>