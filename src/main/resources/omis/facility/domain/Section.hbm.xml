<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.facility.domain">
	<class entity-name="omis.facility.domain.Section"
		proxy="omis.facility.domain.Section"
		name="omis.facility.domain.impl.SectionImpl"
		table="`FACILITY_SECTION`">
		<id name="id" column="`ID`" type="java.lang.Long">
			<generator class="sequence">
				<param name="sequence">`FACILITY_SECTION_SEQ`</param>
			</generator>
		</id>
		<property name="name" column="`NAME`" not-null="true" type="string"/>
		<many-to-one name="facility" column="`FACILITY_ID`" 
			entity-name="omis.facility.domain.Facility" not-null="true" />
		<many-to-one name="complex" column="`COMPLEX_ID`" cascade="none" not-null="false"
			entity-name="omis.facility.domain.Complex" unique="false"/>
		<many-to-one name="unit" column="`UNIT_ID`" cascade="none" not-null="false"
			entity-name="omis.facility.domain.Unit" unique="false"/>
		<many-to-one name="level" column="`LEVEL_ID`" cascade="none" not-null="false"
			entity-name="omis.facility.domain.Level" unique="false"/>
	</class>
	<query name="findSectionsByFacility">
		from 
			omis.facility.domain.Section section
			inner join fetch section.facility facility
		where 
			facility = :facility
		order by
			section.name
	</query>
	<query name="findSectionsByUnit">
		from 
			omis.facility.domain.Section section
			inner join fetch section.unit unit
		where 
			(unit is null and :unit is null)
			or
			unit = :unit
		order by
			section.name
	</query>
	<query name="findSectionsByComplex"><![CDATA[
		from
			omis.facility.domain.Section section
			inner join fetch section.complex complex
		where
			(complex is null and :complex is null)
			or
			complex = :complex
		order by
			section.name
	]]></query>
	<query name="findSectionsByLevel"><![CDATA[
		from
			omis.facility.domain.Section section
			inner join fetch section.level level
		where
			(level is null and :level is null)
			or
			level = :level
		order by
			section.name
	]]></query>
	<query name="findSections"><![CDATA[
		from
			omis.facility.domain.Section section
			left outer join fetch section.complex complex
			left outer join fetch section.facility facility
			left outer join fetch section.unit unit
			left outer join fetch section.level level
		where
			facility = :facility
		and
			(:complex is null or complex = :complex)
		and
			(:unit is null or unit = :unit)
		and
			(:level is null or level = :level)
	]]></query>
	<query name="findSection"><![CDATA[
		from
			omis.facility.domain.Section section
			left outer join fetch section.facility facility
		where
			facility = :facility
		and
			section.name = :name
	]]></query>
	<query name="findSectionExcluding"><![CDATA[
		from
			omis.facility.domain.Section section
			left outer join fetch section.facility facility
		where
			facility = :facility
		and
			section.name = :name
		and
			section <> :excludedSection
	]]></query>
</hibernate-mapping>