<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.health.domain">
	<typedef name="externalReferralAuthorizationStatus" class="org.hibernate.type.EnumType">
		<param name="enumClass">omis.health.domain.ExternalReferralAuthorizationStatus</param>
		<param name="useNamed">true</param>
		<param name="type">12</param>
	</typedef>
	<class entity-name="omis.health.domain.ExternalReferral"
		proxy="omis.health.domain.ExternalReferral"
		name="omis.health.domain.impl.ExternalReferralImpl"
		table="`EXTERNAL_REFERRAL`">
		<id name="id" column="`ID`" type="java.lang.Long">
			<generator class="sequence">
				<param name="sequence">`EXTERNAL_REFERRAL_SEQ`</param>
			</generator>
		</id>
		<many-to-one name="offenderAppointmentAssociation" column="`OFFENDER_APPT_ASSOC_ID`" cascade="none" not-null="true"
			entity-name="omis.health.domain.OffenderAppointmentAssociation" unique="true"/>
		<many-to-one name="statusReason" column="`STATUS_REASON_ID`" not-null="false" entity-name="omis.health.domain.ExternalReferralStatusReason"/>
		<property name="rescheduleRequired" column="`RESCHEDULE_REQ`" not-null="false" type="yes_no"/>
		<property name="schedulingNotes" column="`SCHEDULING_NOTES`" not-null="false" type="string"/>
		<property name="assessmentNotes" column="`ASSESSMENT_NOTES`" not-null="false" type="string"/>
		<property name="reportedDate" column="`REPORTED_DATE`" not-null="false" type="java.util.Date"/>
		<many-to-one name="actionRequest" column="`ACTION_REQUEST_ID`" cascade="none" not-null="false"
			entity-name="omis.health.domain.HealthRequest" unique="false"/>
		<many-to-one name="authorization" entity-name="omis.health.domain.ExternalReferralAuthorization" not-null="true"
		             unique="true" column="`AUTHORIZATION_ID`"/>
		<component name="creationSignature">
			<many-to-one name="userAccount" column="`CREATE_ACCOUNT_ID`" not-null="true"/>
			<property name="date" column="`CREATE_DATE`" not-null="true"/>
		</component>
		<component name="updateSignature">
			<many-to-one name="userAccount" column="`UPDATE_ACCOUNT_ID`" not-null="true"/>
			<property name="date" column="`UPDATE_DATE`" not-null="true"/>
		</component>
	</class>
	<query name="findExternalReferralByAuthorization"><![CDATA[
	  select referral from omis.health.domain.ExternalReferral referral
	  where referral.authorization = :authorization
	]]></query>
	<query name="findExternalReferralByOffenderDateTimeProvider"><![CDATA[
	  select er
	  	from omis.health.domain.ProviderExternalReferralAssociation pera
	  	right outer join pera.externalReferral er
	  where er.offenderAppointmentAssociation.offender = :offender
	  	and er.offenderAppointmentAssociation.appointment.date = :date
	  	and er.offenderAppointmentAssociation.appointment.startTime = :startTime
	  	and pera.providerAssignment = :providerAssignment
	  	and er.statusReason is null
	  	and (pera.cancelled is null
	  	 or pera.cancelled = false)
	]]></query>
	<query name="findExternalReferralByOffenderDateTimeProviderExcluding"><![CDATA[
	  select er
	  	from omis.health.domain.ProviderExternalReferralAssociation pera
	  	right outer join pera.externalReferral er
	  where er.offenderAppointmentAssociation.offender = :offender
	  	and er.offenderAppointmentAssociation.appointment.date = :date
	  	and er.offenderAppointmentAssociation.appointment.startTime = :startTime
	  	and pera.providerAssignment = :providerAssignment
	  	and er.statusReason is null
	  	and (pera.cancelled is null
	  	 or pera.cancelled = false)
	  	and (er not in (:excludedExternalReferral))
	]]></query>
</hibernate-mapping>