<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.education.domain">
	<class entity-name="omis.education.domain.EducationalAchievement"
			proxy="omis.education.domain.EducationalAchievement"
			name="omis.education.domain.impl.EducationalAchievementImpl"
			table="`EDUCATION_ACHIEVEMENT`">
			<id name="id" column="`ID`" type="java.lang.Long">
				<generator class="sequence">
					<param name="sequence">`EDUCATION_ACHIEVEMENT_SEQ`</param>
				</generator>
			</id>
			
			<property name="date" column="`DATE`" type="java.util.Date"  not-null="true"/>
			<property name="description" column="`DESCRIPTION`" type="java.lang.String"  not-null="true"/>
			<many-to-one name="category" column="`EDUCTNL_ACHIEVEMENT_CAT_ID`" entity-name="omis.education.domain.EducationalAchievementCategory" />
			<many-to-one name="educationTerm" column="`EDUCATION_TERM_ID`" entity-name="omis.education.domain.EducationTerm"  not-null="true"/>
			<component name="creationSignature">
				<many-to-one name="userAccount" column="`CREATE_ACCOUNT_ID`" not-null="true"/>
				<property name="date" column="`CREATE_DATE`" not-null="true"/> 	
			</component>
			<component name="updateSignature">
				<many-to-one name="userAccount" column="`UPDATE_ACCOUNT_ID`" not-null="true"/>
				<property name="date" column="`UPDATE_DATE`" not-null="true"/>
			</component>
	</class>
	<query name="findEducationalAchievement"><![CDATA[
		select educationalAchievement
		from
			omis.education.domain.EducationalAchievement educationalAchievement
		where
			educationalAchievement.date = :date
		and
			educationalAchievement.description = :description
		and
			educationalAchievement.educationTerm = :educationTerm
		
	]]></query>
	
	<query name="findEducationalAchievementExcluding"><![CDATA[
		select educationalAchievement
		from
			omis.education.domain.EducationalAchievement educationalAchievement
		where
			educationalAchievement.date = :date
		and
			educationalAchievement.description = :description
		and
			educationalAchievement.educationTerm = :educationTerm
		and
			educationalAchievement != :educationalAchievement
	]]></query>
	<query name="findEducationalAchievementsByEducationTerm"><![CDATA[
		select educationalAchievement
		from
			omis.education.domain.EducationalAchievement educationalAchievement
		where
			educationalAchievement.educationTerm = :educationTerm
		
	]]></query>
	<query name="findEducationalAchievementsExcludingDegreeByEducationTerm"><![CDATA[
		select educationalAchievement
		from
			omis.education.domain.EducationalAchievement educationalAchievement
		where
			educationalAchievement.educationTerm = :educationTerm
		and 
			(educationalAchievement != educationalAchievement.educationTerm.achievement
			OR
			educationalAchievement.educationTerm.achievement is null)
	]]></query>
	
	
</hibernate-mapping>