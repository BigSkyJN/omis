<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.violationevent.domain">
	<class entity-name="omis.violationevent.domain.ConditionViolation"
			proxy="omis.violationevent.domain.ConditionViolation"
			name="omis.violationevent.domain.impl.ConditionViolationImpl"
			table="`CONDITION_VIOLATION`">
			<id name="id" column="`ID`" type="java.lang.Long">
				<generator class="sequence">
					<param name="sequence">`CONDITION_VIOLATION_SEQ`</param>
				</generator>
			</id>
			<many-to-one name="condition" column="`CONDITION_ID`" entity-name="omis.condition.domain.Condition" not-null="true" />
			<many-to-one name="violationEvent" column="`VIOLATION_EVENT_ID`" entity-name="omis.violationevent.domain.ViolationEvent" not-null="true" />
			<property name="details" column="`DETAILS`" type="java.lang.String" not-null="false" />
			<component name="creationSignature">
				<many-to-one name="userAccount" column="`CREATE_ACCOUNT_ID`" not-null="true"/>
				<property name="date" column="`CREATE_DATE`" not-null="true"/> 	
			</component>
			<component name="updateSignature">
				<many-to-one name="userAccount" column="`UPDATE_ACCOUNT_ID`" not-null="true"/>
				<property name="date" column="`UPDATE_DATE`" not-null="true"/>
			</component>
	</class>
	<query name="findConditionViolation"><![CDATA[
		select conditionViolation
		from
			omis.violationevent.domain.ConditionViolation conditionViolation
		where
			conditionViolation.condition = :condition
		and
			conditionViolation.violationEvent = :violationEvent
		and
			(conditionViolation.details = :details
			or (conditionViolation.details is null and :details is null))
	]]></query>
	<query name="findConditionViolationExcluding"><![CDATA[
		select conditionViolation
		from
			omis.violationevent.domain.ConditionViolation conditionViolation
		where
			conditionViolation.condition = :condition
		and
			conditionViolation.violationEvent = :violationEvent
		and
			(conditionViolation.details = :details
			or (conditionViolation.details is null and :details is null))
		and
			conditionViolation != :conditionViolation
	]]></query>
	<query name="findConditionViolationsByViolationEvent"><![CDATA[
		select conditionViolation
		from
			omis.violationevent.domain.ConditionViolation conditionViolation
		where
			conditionViolation.violationEvent = :violationEvent
	]]></query>
	<query name="findUnresolvedConditionViolationsByViolationEvent"><![CDATA[
		select conditionViolation
		from
			omis.violationevent.domain.ConditionViolation conditionViolation
		where
			conditionViolation.violationEvent = :violationEvent
		and
			conditionViolation not in
			(
				select conditionViolationSub
				from
					omis.hearing.domain.Infraction infraction
				inner join
					infraction.conditionViolation conditionViolationSub
				where
					conditionViolationSub = conditionViolation
			)
	]]></query>
</hibernate-mapping>