<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="omis.workassignment.domain">
	<class entity-name="omis.workassignment.domain.WorkAssignmentNote"
	       proxy="omis.workassignment.domain.WorkAssignmentNote"
	       name="omis.workassignment.domain.impl.WorkAssignmentNoteImpl"
		   table="`WORK_ASSIGNMENT_NOTE`">
		<id name="id" column="`ID`" type="java.lang.Long">
			<generator class="sequence">
				<param name="sequence">`WORK_ASSIGNMENT_NOTE_SEQ`</param>
			</generator>
		</id>
		<property name="date" type="java.util.Date" column="`DATE`" not-null="true"/>
		<property name="value" type="java.lang.String" column="`VALUE`" not-null="true" />
		<many-to-one name="assignment" column="`ASSIGNMENT_ID`" cascade="none" not-null="true"
			entity-name="omis.workassignment.domain.WorkAssignment" unique="false"/>
		<component name="creationSignature" class="omis.audit.domain.CreationSignature">
			<many-to-one name="userAccount" entity-name="omis.user.domain.UserAccount" column="`CREATE_ACCOUNT_ID`" not-null="true"/>
			<property name="date" type="java.util.Date" column="`CREATE_DATE`" not-null="true"/>
		</component>
		<component name="updateSignature" class="omis.audit.domain.UpdateSignature">
			<many-to-one name="userAccount" column="`UPDATE_ACCOUNT_ID`" entity-name="omis.user.domain.UserAccount" not-null="true"/>
			<property name="date" type="java.util.Date" column="`UPDATE_DATE`" not-null="true"/>
		</component>
	</class>
<!-- 	find all notes of a work assignment -->
	<query name="findWorkAssignmentNotes"><![CDATA[
	select workAssignmentNote
	from 
		omis.workassignment.domain.WorkAssignmentNote workAssignmentNote	
	where 
		workAssignmentNote.assignment = :workAssignment
	order by
		workAssignmentNote.date
	]]></query>
	
	<query name="findExistingWorkAssignmentNote"><![CDATA[
		select workAssignmentNote 
	from omis.workassignment.domain.WorkAssignmentNote workAssignmentNote
	where
		workAssignmentNote.assignment = :workAssignment
	and
		workAssignmentNote.date = :date
	and
		workAssignmentNote.value = :value
	]]></query>
	
	<query name="findExcludedExistingWorkAssignmentNote"><![CDATA[
		select workAssignmentNote 
	from omis.workassignment.domain.WorkAssignmentNote workAssignmentNote
	where
		workAssignmentNote.assignment = :workAssignment
	and
		workAssignmentNote.date = :date
	and
		workAssignmentNote.value = :value
	and 
		workAssignmentNote <> :excludedWorkAssignmentNote
	]]></query>
</hibernate-mapping>